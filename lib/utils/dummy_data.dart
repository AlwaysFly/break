import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:workout_player/models/enum/equipment_required.dart';
import 'package:workout_player/models/enum/main_muscle_group.dart';
import 'package:workout_player/models/enum/meal.dart';
import 'package:workout_player/models/enum/unit_of_mass.dart';
import 'package:workout_player/models/models.dart';

class DummyData {
  static final now = Timestamp.now();

  static final user = User(
    userName: 'John Doe',
    unitOfMass: 1,
    totalWeights: 0,
    totalNumberOfWorkouts: 0,
    signUpDate: now,
    userEmail: 'JohnDoe@nextsportif.com',
    signUpProvider: 'Healtine',
    userId: 'JD',
    lastLoginDate: Timestamp.now(),
    savedRoutines: [],
    savedWorkouts: [],
    displayName: 'John Doe',
    backgroundImageIndex: 0,
  );

  static final workout = Workout(
    workoutId: 'workoutId',
    workoutOwnerId: 'workoutOwnerId',
    workoutOwnerUserName: 'workoutOwnerUserName',
    description: 'description',
    equipmentRequired: EquipmentRequired.barbell.list,
    mainMuscleGroup: MainMuscleGroup.abs.list,
    secondaryMuscleGroup: ['secondaryMuscleGroup.chest'],
    workoutTitle: 'workoutTitle',
    difficulty: 0,
    imageUrl: 'imageUrl',
    instructions: 'imageUrl',
    isBodyWeightWorkout: true,
    isPublic: true,
    lastEditedDate: now,
    secondsPerRep: 0,
    tips: 'tips',
    translated: {
      'de': 'Name des Trainings',
      'en': 'Workout Title',
      'es': 'Nombre del entrenamiento',
      'fr': 'Nom de lentraînement',
      'ko': '운동 이름'
    },
    location: 'Location.gym',
    workoutCreatedDate: now,
  );

  static final routine = Routine(
    lastEditedDate: now,
    equipmentRequired: ['EquipmentRequired.barbell'],
    mainMuscleGroup: ['MainMuscleGroup.chest'],
    secondMuscleGroup: ['secondMuscleGroup.chest'],
    routineCreatedDate: now,
    routineId: 'routineId',
    routineOwnerId: 'routineOwnerId',
    routineOwnerUserName: 'routineOwnerUserName',
    routineTitle: 'routineTitle',
    averageTotalCalories: 0,
    description: 'description',
    duration: 0,
    imageUrl: 'imageUrl',
    initialUnitOfMass: 0,
    isPublic: true,
    totalWeights: 0,
    trainingLevel: 0,
    location: 'Location.gym',
  );

  static const routineWork = RoutineWorkout(
    routineWorkoutId: 'routineWorkoutId',
    routineId: 'routineId',
    routineWorkoutOwnerId: 'routineWorkoutOwnerId',
    workoutId: 'workoutId',
    workoutTitle: 'Bench Press',
    index: 0,
    numberOfSets: 5,
    numberOfReps: 20,
    totalWeights: 5000,
    isBodyWeightWorkout: false,
    duration: 0,
    secondsPerRep: 0,
    translated: {
      'de': 'Bench Press',
      'en': 'Bench Press',
      'es': 'Bench Press',
      'fr': 'Bench Press',
      'ko': '벤치 프레스'
    },
    sets: [
      WorkoutSet(
        workoutSetId: 'workoutSetId',
        isRest: false,
        index: 0,
        setTitle: 'Set',
        reps: 10,
        setIndex: 0,
        weights: 60,
      ),
    ],
  );

  static const routineWorks = [
    RoutineWorkout(
      routineWorkoutId: 'routineWorkoutId',
      routineId: 'routineId',
      routineWorkoutOwnerId: 'routineWorkoutOwnerId',
      workoutId: 'workoutId',
      workoutTitle: 'Bench Press',
      index: 0,
      numberOfSets: 5,
      numberOfReps: 51,
      totalWeights: 3460,
      isBodyWeightWorkout: false,
      duration: 0,
      secondsPerRep: 0,
      translated: {
        'de': 'Bench Press',
        'en': 'Bench Press',
        'es': 'Bench Press',
        'fr': 'Bench Press',
        'ko': '벤치 프레스'
      },
      sets: [
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 1,
          setTitle: 'Set',
          reps: 15,
          setIndex: 1,
          weights: 60,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 1,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 1,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 2,
          setTitle: 'Set',
          reps: 12,
          setIndex: 2,
          weights: 65,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 1,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 2,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 3,
          setTitle: 'Set',
          reps: 10,
          setIndex: 3,
          weights: 70,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 3,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 3,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 4,
          setTitle: 'Set',
          reps: 8,
          setIndex: 4,
          weights: 75,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 3,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 3,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 5,
          setTitle: 'Set',
          reps: 6,
          setIndex: 5,
          weights: 80,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 4,
          setTitle: 'Rest',
          restTime: 120,
          restIndex: 4,
        ),
      ],
    ),
    RoutineWorkout(
      routineWorkoutId: 'routineWorkoutId',
      routineId: 'routineId',
      routineWorkoutOwnerId: 'routineWorkoutOwnerId',
      workoutId: 'workoutId',
      workoutTitle: 'Incline Bench Press',
      index: 0,
      numberOfSets: 5,
      numberOfReps: 51,
      totalWeights: 3460,
      isBodyWeightWorkout: false,
      duration: 0,
      secondsPerRep: 0,
      translated: {
        'de': 'Incline Bench Press',
        'en': 'Incline Bench Press',
        'es': 'Incline Bench Press',
        'fr': 'Incline Bench Press',
        'ko': '인클라인 벤치 프레스'
      },
      sets: [
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 1,
          setTitle: 'Set',
          reps: 15,
          setIndex: 1,
          weights: 60,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 1,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 1,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 2,
          setTitle: 'Set',
          reps: 12,
          setIndex: 2,
          weights: 65,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 1,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 2,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 3,
          setTitle: 'Set',
          reps: 10,
          setIndex: 3,
          weights: 70,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 3,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 3,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 4,
          setTitle: 'Set',
          reps: 8,
          setIndex: 4,
          weights: 75,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 3,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 3,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 5,
          setTitle: 'Set',
          reps: 6,
          setIndex: 5,
          weights: 80,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 4,
          setTitle: 'Rest',
          restTime: 120,
          restIndex: 4,
        ),
      ],
    ),
    RoutineWorkout(
      routineWorkoutId: 'routineWorkoutId',
      routineId: 'routineId',
      routineWorkoutOwnerId: 'routineWorkoutOwnerId',
      workoutId: 'workoutId',
      workoutTitle: 'Incline Dumbbell Press',
      index: 0,
      numberOfSets: 5,
      numberOfReps: 51,
      totalWeights: 3460,
      isBodyWeightWorkout: false,
      duration: 0,
      secondsPerRep: 0,
      translated: {
        'de': 'Incline Dumbbell Press',
        'en': 'Incline Dumbbell Press',
        'es': 'Incline Dumbbell Press',
        'fr': 'Incline Dumbbell Press',
        'ko': '인클라인 덤벨 프레스'
      },
      sets: [
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 1,
          setTitle: 'Set',
          reps: 15,
          setIndex: 1,
          weights: 60,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 1,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 1,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 2,
          setTitle: 'Set',
          reps: 12,
          setIndex: 2,
          weights: 65,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 1,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 2,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 3,
          setTitle: 'Set',
          reps: 10,
          setIndex: 3,
          weights: 70,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 3,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 3,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 4,
          setTitle: 'Set',
          reps: 8,
          setIndex: 4,
          weights: 75,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 3,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 3,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 5,
          setTitle: 'Set',
          reps: 6,
          setIndex: 5,
          weights: 80,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 4,
          setTitle: 'Rest',
          restTime: 120,
          restIndex: 4,
        ),
      ],
    ),
    RoutineWorkout(
      routineWorkoutId: 'routineWorkoutId',
      routineId: 'routineId',
      routineWorkoutOwnerId: 'routineWorkoutOwnerId',
      workoutId: 'workoutId',
      workoutTitle: 'Incline Dumbbell Fly',
      index: 0,
      numberOfSets: 5,
      numberOfReps: 0,
      totalWeights: 2500,
      isBodyWeightWorkout: false,
      duration: 0,
      secondsPerRep: 0,
      translated: {
        'de': 'Incline Dumbbell Fly',
        'en': 'Incline Dumbbell Fly',
        'es': 'Incline Dumbbell Fly',
        'fr': 'Incline Dumbbell Fly',
        'ko': '인클라인 덤벨 플라이'
      },
      sets: [
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 1,
          setTitle: 'Set',
          reps: 20,
          setIndex: 1,
          weights: 25,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 1,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 1,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 2,
          setTitle: 'Set',
          reps: 20,
          setIndex: 2,
          weights: 25,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 1,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 2,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 3,
          setTitle: 'Set',
          reps: 20,
          setIndex: 3,
          weights: 25,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 3,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 3,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 4,
          setTitle: 'Set',
          reps: 20,
          setIndex: 4,
          weights: 25,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 3,
          setTitle: 'Rest',
          restTime: 60,
          restIndex: 3,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: false,
          index: 5,
          setTitle: 'Set',
          reps: 20,
          setIndex: 5,
          weights: 25,
        ),
        WorkoutSet(
          workoutSetId: 'workoutSetId',
          isRest: true,
          index: 4,
          setTitle: 'Rest',
          restTime: 120,
          restIndex: 4,
        ),
      ],
    ),
  ];

  static final routineHistory = RoutineHistory(
    routineHistoryId: 'routineHistoryId',
    userId: 'userId',
    username: 'username',
    routineId: 'routineId',
    routineTitle: 'routineTitle',
    isPublic: true,
    workoutStartTime: Timestamp.now(),
    workoutEndTime: Timestamp.now(),
    totalWeights: 100,
    totalDuration: 100,
    mainMuscleGroup: ['MainMuscleGroup.abs'],
    isBodyWeightWorkout: false,
    workoutDate: DateTime.now(),
    imageUrl: '',
    unitOfMass: 0,
    equipmentRequired: ['EquipmentRequired.band'],
    routineHistoryType: 'routine',
    youtubeWorkouts: [],
  );

  static final nutritionDummyData = Nutrition(
    nutritionId: 'nutritionId',
    userId: 'userId',
    username: 'username',
    loggedTime: now,
    loggedDate: now.toDate(),
    type: Meal.afterWorkout,
    proteinAmount: 100,
    description: 'Breakfast',
    isCreditCardTransaction: false,
  );

  static List<Nutrition> nutritions = [
    Nutrition(
      nutritionId: 'nutritionId',
      userId: 'userId',
      username: 'username',
      loggedTime: now,
      loggedDate: now.toDate(),
      type: Meal.dinner,
      proteinAmount: 18,
      carbs: 51,
      fat: 22,
      calories: 487,
      unitOfMass: UnitOfMass.kilograms,
      description: 'Bacon And Egg Ramen',
      isCreditCardTransaction: false,
    ),
    Nutrition(
      nutritionId: 'nutritionId',
      userId: 'userId',
      username: 'username',
      loggedTime: now,
      loggedDate: now.toDate(),
      type: Meal.snack,
      proteinAmount: 8 * 5,
      carbs: 20 * 5,
      fat: 7 * 5,
      calories: 181 * 5,
      unitOfMass: UnitOfMass.kilograms,
      description: 'Honey BBQ Chicken Wings',
      isCreditCardTransaction: false,
    ),
    Nutrition(
      nutritionId: 'nutritionId',
      userId: 'userId',
      username: 'username',
      loggedTime: now,
      loggedDate: now.toDate(),
      type: Meal.lunch,
      proteinAmount: 22,
      carbs: 15,
      fat: 24,
      calories: 350,
      unitOfMass: UnitOfMass.kilograms,
      description: 'Pesto Chicken & Veggies',
      isCreditCardTransaction: false,
    ),
    Nutrition(
      nutritionId: 'nutritionId',
      userId: 'userId',
      username: 'username',
      loggedTime: now,
      loggedDate: now.toDate(),
      type: Meal.breakfast,
      proteinAmount: 15,
      carbs: 64,
      fat: 13,
      calories: 449,
      unitOfMass: UnitOfMass.kilograms,
      description: 'Buttermilk Pancakes',
      isCreditCardTransaction: false,
    ),
    Nutrition(
      nutritionId: 'nutritionId',
      userId: 'userId',
      username: 'username',
      loggedTime: Timestamp.fromDate(
        now.toDate().subtract(const Duration(days: 1)),
      ),
      loggedDate: now.toDate().subtract(const Duration(days: 1)),
      type: Meal.dinner,
      proteinAmount: 25,
      carbs: 109,
      fat: 22,
      calories: 755,
      unitOfMass: UnitOfMass.kilograms,
      description: 'Tomato And Anchovy Pasta',
      isCreditCardTransaction: false,
    ),
  ];

  static final measurementDummyData = Measurement(
    measurementId: 'measurementId',
    userId: 'userId',
    username: 'username',
    loggedTime: now,
    loggedDate: now.toDate(),
  );
}
